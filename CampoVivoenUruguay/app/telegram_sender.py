#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ Telegram-–∫–∞–Ω–∞–ª.
"""

import os
import logging
import asyncio
import requests
from typing import List, Optional, Dict, Any, Set, Tuple
from datetime import datetime
from io import BytesIO
from pydantic import HttpUrl
from urllib.parse import urlparse
import json
import time
from pathlib import Path

from app.models import Listing

logger = logging.getLogger(__name__)

class TelegramSender:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –∑–µ–º–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–∞—Ö –≤ Telegram –∫–∞–Ω–∞–ª.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–∫—É
    —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.
    """
    
    def __init__(
        self, 
        bot_token: str, 
        chat_id: str,
        sent_listings_file: str = "cache/sent_listings.json",
        max_images_per_listing: int = 5,
        max_retries: int = 3,
        retry_delay: int = 2,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è Telegram.
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            chat_id: ID —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            sent_listings_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            max_images_per_listing: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            retry_delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        """
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.sent_listings_file = sent_listings_file
        self.max_images_per_listing = max_images_per_listing
        self.max_retries = max_retries
        self.retry_delay = retry_delay
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ URL-–∞–¥—Ä–µ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        self.sent_listings: Set[str] = set()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._ensure_cache_dir()
        self.load_sent_listings()
    
    def _ensure_cache_dir(self) -> None:
        """–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫—ç—à–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        cache_dir = os.path.dirname(self.sent_listings_file)
        if not os.path.exists(cache_dir):
            os.makedirs(cache_dir, exist_ok=True)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫—ç—à–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {cache_dir}")
    
    def load_sent_listings(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        if not os.path.exists(self.sent_listings_file):
            logger.info(f"–§–∞–π–ª —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.sent_listings_file}")
            return
        
        try:
            with open(self.sent_listings_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                self.sent_listings = set(data.get('sent_urls', []))
                
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.sent_listings)} —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
            self.sent_listings = set()
    
    def save_sent_listings(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        try:
            data = {'sent_urls': list(self.sent_listings)}
            
            with open(self.sent_listings_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
                
            logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.sent_listings)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
    
    def format_message(self, listing: Listing) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown V2.
        
        Args:
            listing: –û–±—ä–µ–∫—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown V2
        def escape_md(text):
            if not text:
                return ""
            chars = '_*[]()~`>#+-=|{}.!'
            return ''.join(f'\\{c}' if c in chars else c for c in str(text))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title = f"*üå± {escape_md(listing.title)}*" if listing.title else "*üå± –ó–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫*"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
        price_line = ""
        if listing.price:
            currency = listing.price_currency if listing.price_currency else "USD"
            price_formatted = f"{int(listing.price):,}".replace(',', ' ')
            price_line = f"üí∞ *–¶–µ–Ω–∞:* {escape_md(price_formatted)} {escape_md(currency)}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –∑–∞ –º¬≤ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–ª–æ—â–∞–¥—å
            if listing.price_per_sqm and listing.price_per_sqm > 0:
                price_per_sqm = f"{listing.price_per_sqm:.1f}".replace('.0', '')
                price_line += f"üìä *–¶–µ–Ω–∞ –∑–∞ –º¬≤:* {escape_md(price_per_sqm)} {escape_md(currency)}/–º¬≤\n"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏
        area_line = ""
        if listing.area:
            area_formatted = f"{listing.area:,}".replace(',', ' ').replace('.0', '')
            area_line = f"üìè *–ü–ª–æ—â–∞–¥—å:* {escape_md(area_formatted)} –º¬≤\n"
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –≥–µ–∫—Ç–∞—Ä—ã –µ—Å–ª–∏ –ø–ª–æ—â–∞–¥—å –±–æ–ª—å—à–µ 10000 –º¬≤
            if listing.area >= 10000:
                hectares = listing.area / 10000
                area_line += f"üå≥ *–ü–ª–æ—â–∞–¥—å:* {escape_md(f'{hectares:.2f}'.replace('.00', ''))} –≥–∞\n"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        location_line = ""
        if listing.location:
            location_line = f"üìç *–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:* {escape_md(listing.location)}\n"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        features = []
        
        if listing.has_water is True:
            features.append("üíß –í–æ–¥–∞")
        elif listing.has_water is False:
            features.append("‚ùå –ë–µ–∑ –≤–æ–¥—ã")
        
        if listing.has_electricity is True:
            features.append("‚ö° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ")
        elif listing.has_electricity is False:
            features.append("‚ùå –ë–µ–∑ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞")
        
        if listing.has_internet is True:
            features.append("üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç")
        
        if listing.zoning:
            features.append(f"üè† {escape_md(listing.zoning)}")
        
        features_line = ""
        if features:
            features_text = " ¬∑ ".join(features)
            features_line = f"üîß *–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:* {features_text}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –¥–ª–∏–Ω–µ
        description_line = ""
        if listing.description:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
            max_desc_length = 300
            description = listing.description
            if len(description) > max_desc_length:
                description = description[:max_desc_length].strip() + "..."
                
            description_line = f"\nüìù {escape_md(description)}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        source_line = ""
        if listing.source:
            source_name = listing.source.replace("mercadolibre", "MercadoLibre")
            source_name = source_name.replace("infocasas", "InfoCasas")
            source_line = f"üîç *–ò—Å—Ç–æ—á–Ω–∏–∫:* {escape_md(source_name)}"
            
            if listing.crawled_at:
                crawled_date = listing.crawled_at.strftime("%d.%m.%Y")
                source_line += f" ¬∑ {escape_md(crawled_date)}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        url_line = f"\n[–û—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({escape_md(listing.url)})"
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        message_parts = [
            title,
            "\n",
            price_line,
            area_line,
            location_line,
            features_line,
            description_line,
            source_line,
            url_line
        ]
        
        return "".join(message_parts)
    
    async def download_image(self, url: str) -> Optional[bytes]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL.
        
        Args:
            url: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            Optional[bytes]: –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        for attempt in range(1, self.max_retries + 1):
            try:
                response = requests.get(url, timeout=15)
                if response.status_code == 200:
                    logger.debug(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {url}")
                    return response.content
                else:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {url}, —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ({attempt}/{self.max_retries}): {url}, {e}")
                
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            if attempt < self.max_retries:
                await asyncio.sleep(self.retry_delay)
        
        return None
    
    async def send_listing(self, listing: Listing) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ Telegram.
        
        Args:
            listing: –û–±—ä–µ–∫—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            
        Returns:
            bool: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏, –∏–Ω–∞—á–µ False
        """
        if not self.bot_token or not self.chat_id:
            logger.error("–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ ID —á–∞—Ç–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        if listing.url in self.sent_listings:
            logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ: {listing.url}")
            return False
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = self.format_message(listing)
        
        try:
            # API URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            api_url = f"https://api.telegram.org/bot{self.bot_token}/sendMediaGroup"
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images = []
            if listing.images:
                for i, img_url in enumerate(listing.images[:self.max_images_per_listing]):
                    image_data = await self.download_image(img_url)
                    if image_data:
                        images.append(image_data)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≥—Ä—É–ø–ø–æ–π
            if images:
                media = []
                
                # –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é (—Å–æ–æ–±—â–µ–Ω–∏–µ–º)
                media.append({
                    'type': 'photo',
                    'media': f'attach://photo0',
                    'caption': message_text,
                    'parse_mode': 'MarkdownV2'
                })
                
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                for i in range(1, len(images)):
                    media.append({
                        'type': 'photo',
                        'media': f'attach://photo{i}'
                    })
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                files = {}
                for i, img_data in enumerate(images):
                    files[f'photo{i}'] = img_data
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
                params = {
                    'chat_id': self.chat_id,
                    'media': json.dumps(media)
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                for attempt in range(1, self.max_retries + 1):
                    try:
                        response = requests.post(api_url, params=params, files=files, timeout=30)
                        if response.status_code == 200:
                            logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {listing.url}")
                            self.sent_listings.add(listing.url)
                            self.save_sent_listings()
                            return True
                        else:
                            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ Telegram: {listing.url}, "
                                          f"—Å—Ç–∞—Ç—É—Å: {response.status_code}, –æ—Ç–≤–µ—Ç: {response.text}")
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ Telegram ({attempt}/{self.max_retries}): "
                                      f"{listing.url}, {e}")
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    if attempt < self.max_retries:
                        await asyncio.sleep(self.retry_delay)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            api_url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            params = {
                'chat_id': self.chat_id,
                'text': message_text,
                'parse_mode': 'MarkdownV2',
                'disable_web_page_preview': False  # –í–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            }
            
            for attempt in range(1, self.max_retries + 1):
                try:
                    response = requests.post(api_url, json=params, timeout=15)
                    if response.status_code == 200:
                        logger.info(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {listing.url}")
                        self.sent_listings.add(listing.url)
                        self.save_sent_listings()
                        return True
                    else:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {listing.url}, "
                                      f"—Å—Ç–∞—Ç—É—Å: {response.status_code}, –æ—Ç–≤–µ—Ç: {response.text}")
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram ({attempt}/{self.max_retries}): "
                                  f"{listing.url}, {e}")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                if attempt < self.max_retries:
                    await asyncio.sleep(self.retry_delay)
            
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ Telegram: {listing.url}, {e}")
        
        return False
    
    async def send_listings(self, listings: List[Listing], delay: float = 2.0) -> Tuple[int, int]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ Telegram —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
        
        Args:
            listings: –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
            
        Returns:
            Tuple[int, int]: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        """
        sent_count = 0
        skipped_count = 0
        
        for listing in listings:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            if listing.url in self.sent_listings:
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ): {listing.url}")
                skipped_count += 1
                continue
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            success = await self.send_listing(listing)
            
            if success:
                sent_count += 1
            else:
                skipped_count += 1
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API
            if delay > 0 and listings.index(listing) < len(listings) - 1:
                await asyncio.sleep(delay)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        return sent_count, skipped_count
    
    async def send_test_message(self, text: str = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.
        
        Args:
            text: –¢–µ–∫—Å—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            bool: True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏, –∏–Ω–∞—á–µ False
        """
        if not self.bot_token or not self.chat_id:
            logger.error("–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ ID —á–∞—Ç–∞")
            return False
        
        api_url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        params = {
            'chat_id': self.chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }
        
        try:
            response = requests.post(api_url, json=params, timeout=15)
            if response.status_code == 200:
                logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: "
                           f"—Å—Ç–∞—Ç—É—Å {response.status_code}, –æ—Ç–≤–µ—Ç: {response.text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        return False


async def test_telegram_sender():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    from dotenv import load_dotenv
    load_dotenv()
    
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    chat_id = os.getenv("TELEGRAM_CHAT_ID")
    
    if not bot_token or not chat_id:
        logger.error("–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–ª–∏ ID —á–∞—Ç–∞ –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    test_listing = Listing(
        id="test123",
        url="https://example.com/test",
        title="–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –∑–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ —É –º–æ—Ä—è",
        source="test",
        price=45000,
        price_currency="USD",
        location="–†–æ—á–∞, –õ–∞-–ü–∞–ª–æ–º–∞, –£—Ä—É–≥–≤–∞–π",
        area=1200,
        description="–£—á–∞—Å—Ç–æ–∫ —Å –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–º –≤–∏–¥–æ–º –Ω–∞ –æ–∫–µ–∞–Ω. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–æ–º–∞ –∏–ª–∏ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞.",
        images=["https://picsum.photos/800/600", "https://picsum.photos/800/601"],
        has_water=True,
        has_electricity=True,
        has_internet=True,
        zoning="–ñ–∏–ª–∞—è –∑–æ–Ω–∞",
        crawled_at=datetime.now()
    )
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    sender = TelegramSender(bot_token=bot_token, chat_id=chat_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await sender.send_test_message("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    success = await sender.send_listing(test_listing)
    
    if success:
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    asyncio.run(test_telegram_sender()) 