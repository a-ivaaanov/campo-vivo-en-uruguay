#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ Telegram-–∫–∞–Ω–∞–ª.
"""

import os
import logging
import asyncio
import requests
from typing import List, Optional, Dict, Any
from datetime import datetime
from io import BytesIO
from pydantic import HttpUrl
from urllib.parse import urlparse

from app.models import Listing

logger = logging.getLogger(__name__)

class TelegramSender:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ Telegram-–∫–∞–Ω–∞–ª.
    """
    
    def __init__(self, token: str = None, chat_id: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤—â–∏–∫ Telegram.
        
        Args:
            token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram
            chat_id: ID —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞
        """
        self.token = token or os.getenv("TELEGRAM_BOT_TOKEN")
        self.chat_id = chat_id or os.getenv("TELEGRAM_CHAT_ID")
        
        if not self.token:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        
        if not self.chat_id:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω ID —á–∞—Ç–∞ Telegram. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_CHAT_ID")
        
        self.api_url = f"https://api.telegram.org/bot{self.token}"
        self.seen_listings = self._load_seen_listings()
    
    def _load_seen_listings(self) -> set:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ ID —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π."""
        try:
            cache_file = "data/telegram_sent_cache.txt"
            if os.path.exists(cache_file):
                with open(cache_file, "r", encoding="utf-8") as f:
                    return set(line.strip() for line in f if line.strip())
            return set()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–µ—à–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
            return set()
    
    def _save_seen_listings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π."""
        try:
            cache_file = "data/telegram_sent_cache.txt"
            os.makedirs(os.path.dirname(cache_file), exist_ok=True)
            with open(cache_file, "w", encoding="utf-8") as f:
                for listing_id in self.seen_listings:
                    f.write(f"{listing_id}\n")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–µ—à–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
    
    def _format_message(self, listing: Listing) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
        
        Args:
            listing: –û–±—ä–µ–∫—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        header_emoji = "üèûÔ∏è"
        price_emoji = "üí∞"
        location_emoji = "üìç"
        area_emoji = "üìè"
        source_emoji = "üîç"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        message.append(f"*{header_emoji} {listing.title}*")
        message.append("")
        
        # –¶–µ–Ω–∞
        if listing.price:
            message.append(f"{price_emoji} *–¶–µ–Ω–∞:* {listing.price}")
        
        # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        if listing.location:
            message.append(f"{location_emoji} *–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:* {listing.location}")
        
        # –ü–ª–æ—â–∞–¥—å
        if listing.area:
            message.append(f"{area_emoji} *–ü–ª–æ—â–∞–¥—å:* {listing.area}")
        
        # –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        if listing.utilities and listing.utilities != "–ù–µ —É–∫–∞–∑–∞–Ω–æ":
            message.append(f"üîå *–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏:* {listing.utilities}")
        
        # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –æ–ø–∏—Å–∞–Ω–∏–µ–º
        message.append("")
        
        # –û–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if listing.description:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
            max_desc_len = 300
            desc = listing.description
            if len(desc) > max_desc_len:
                desc = desc[:max_desc_len] + "..."
            message.append(desc)
            message.append("")
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫ –∏ —Å—Å—ã–ª–∫–∞
        source_name = {
            "mercadolibre": "MercadoLibre",
            "infocasas": "InfoCasas",
            "gallito": "Gallito"
        }.get(listing.source, listing.source)
        
        message.append(f"{source_emoji} *–ò—Å—Ç–æ—á–Ω–∏–∫:* {source_name}")
        message.append(f"[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({listing.url})")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
        message.append("")
        hashtags = ["#Uruguay", f"#{source_name}", "#Terreno"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –≤ —Ö–µ—à—Ç–µ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if listing.location and listing.location != "Uruguay":
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Ö–µ—à—Ç–µ–≥–∞
            location_hashtag = listing.location.split(',')[0].strip().replace(' ', '')
            hashtags.append(f"#{location_hashtag}")
        
        message.append(" ".join(hashtags))
        
        return "\n".join(message)
    
    def _escape_markdown(self, text: str) -> str:
        """
        –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–º–µ—Ç–∫–∏ Markdown.
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            str: –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not text:
            return ""
        
        # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ Markdown V2
        escape_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
        
        for char in escape_chars:
            text = text.replace(char, f"\\{char}")
        
        return text
    
    async def download_image(self, url: str) -> Optional[bytes]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL.
        
        Args:
            url: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            Optional[bytes]: –î–≤–æ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
            if url.startswith("/") or url.startswith("./") or url.startswith("../"):
                # –≠—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                with open(url, "rb") as f:
                    return f.read()
            
            # –≠—Ç–æ URL - –∑–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ requests
            response = requests.get(url, timeout=30)
            response.raise_for_status()
            return response.content
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {url}: {e}")
            return None
    
    async def send_listing(self, listing: Listing) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ Telegram-–∫–∞–Ω–∞–ª.
        
        Args:
            listing: –û–±—ä–µ–∫—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            
        Returns:
            bool: True, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ chat_id –∏ token
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º chat_id: {self.chat_id} –∏ token: {self.token[:10]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        listing_id = str(listing.url)
        if listing_id in self.seen_listings:
            logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {listing_id} —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ")
            return False
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = self._format_message(listing)
        
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            if listing.image_url:
                image_data = await self.download_image(str(listing.image_url))
                
                if image_data:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                    files = {'photo': image_data}
                    data = {
                        'chat_id': self.chat_id,
                        'caption': message_text,
                        'parse_mode': 'Markdown'
                    }
                    
                    response = requests.post(f"{self.api_url}/sendPhoto", files=files, data=data)
                    
                    if response.status_code == 200:
                        self.seen_listings.add(listing_id)
                        self._save_seen_listings()
                        logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {listing_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
                        return True
                    else:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤ Telegram: {response.text}")
                
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            data = {
                'chat_id': self.chat_id,
                'text': message_text,
                'parse_mode': 'Markdown',
                'disable_web_page_preview': False
            }
            
            response = requests.post(f"{self.api_url}/sendMessage", json=data)
            
            if response.status_code == 200:
                self.seen_listings.add(listing_id)
                self._save_seen_listings()
                logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {listing_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {listing_id} –≤ Telegram: {e}")
            return False
    
    async def send_listings(self, listings: List[Listing], only_recent: bool = True) -> Dict[str, int]:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ Telegram-–∫–∞–Ω–∞–ª.
        
        Args:
            listings: –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            only_recent: –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–¥–∞–≤–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤)
            
        Returns:
            Dict[str, int]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        """
        if not listings:
            logger.info("–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return {}
        
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É {len(listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ Telegram-–∫–∞–Ω–∞–ª")
        
        stats = {
            "total": len(listings),
            "sent": 0,
            "skipped": 0,
            "errors": 0
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        source_stats = {}
        
        for listing in listings:
            source = listing.source
            if source not in source_stats:
                source_stats[source] = {"total": 0, "sent": 0}
            
            source_stats[source]["total"] += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏–º (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            is_recent = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–µ–µ
            
            if only_recent:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ –∞—Ç—Ä–∏–±—É—Ç is_recent
                has_recent_attribute = (
                    listing.attributes and 
                    isinstance(listing.attributes, dict) and 
                    listing.attributes.get("is_recent", False)
                )
                
                if has_recent_attribute:
                    is_recent = True
                elif hasattr(listing, "date_published") and listing.date_published:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –Ω–µ –±–æ–ª–µ–µ 12 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
                    hours_diff = (datetime.now() - listing.date_published).total_seconds() / 3600
                    is_recent = hours_diff <= 12
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
                    if hasattr(listing, "date_scraped") and listing.date_scraped:
                        hours_diff = (datetime.now() - listing.date_scraped).total_seconds() / 3600
                        is_recent = hours_diff <= 1  # –î–ª—è date_scraped –∏—Å–ø–æ–ª—å–∑—É–µ–º 1 —á–∞—Å
            
            # –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–µ–¥–∞–≤–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if only_recent and not is_recent:
                logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ –Ω–µ–¥–∞–≤–Ω–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {listing.url}")
                stats["skipped"] += 1
                continue
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            try:
                success = await self.send_listing(listing)
                
                if success:
                    stats["sent"] += 1
                    source_stats[source]["sent"] += 1
                else:
                    stats["skipped"] += 1
                
                # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {listing.url}: {e}")
                stats["errors"] += 1
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ: {stats['total']}, "
                   f"–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['sent']}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']}, "
                   f"–æ—à–∏–±–æ–∫: {stats['errors']}")
        
        for source, source_stat in source_stats.items():
            logger.info(f"–ò—Å—Ç–æ—á–Ω–∏–∫ {source}: –≤—Å–µ–≥–æ {source_stat['total']}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {source_stat['sent']}")
        
        return source_stats

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
async def send_listings_to_telegram(listings: List[Listing], only_recent: bool = True) -> Dict[str, int]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ Telegram-–∫–∞–Ω–∞–ª.
    
    Args:
        listings: –°–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        only_recent: –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–¥–∞–≤–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        
    Returns:
        Dict[str, int]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤—â–∏–∫–∞ Telegram
        sender = TelegramSender()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        return await sender.send_listings(listings, only_recent)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ Telegram: {e}")
        return {"error": str(e)}

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    from app.models import Listing
    
    async def test_telegram_sender():
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        test_listing = Listing(
            title="–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
            price="USD 50,000",
            location="Punta del Este, Maldonado",
            area="1000 m¬≤",
            url="https://www.example.com/listing/123",
            source="test",
            image_url="https://www.example.com/image.jpg",
            description="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.",
            utilities="–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ, –≤–æ–¥–∞",
            attributes={"is_recent": True}
        )
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤—â–∏–∫–∞ Telegram
        sender = TelegramSender()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        success = await sender.send_listing(test_listing)
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {'—É—Å–ø–µ—à–Ω–æ' if success else '–æ—à–∏–±–∫–∞'}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    asyncio.run(test_telegram_sender()) 