import asyncio
import aiohttp
import json
import os
import logging
import re
import time
from pathlib import Path
from typing import List, Dict, Optional, Union, Set
from aiohttp import ClientSession, ClientTimeout
from datetime import datetime, timezone

from app.models import Listing

class TelegramSender:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ –∑–µ–º–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–∞—Ö –≤ –∫–∞–Ω–∞–ª Telegram."""
    
    def __init__(
        self, 
        bot_token: str, 
        chat_id: str,
        cache_dir: str = "cache",
        max_retries: int = 3,
        retry_delay: int = 5,
        max_images: int = 5,
        download_images: bool = True
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è Telegram.
        
        :param bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        :param chat_id: ID —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        :param cache_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        :param max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        :param retry_delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        :param max_images: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        :param download_images: –°–∫–∞—á–∏–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        """
        self.logger = logging.getLogger(__name__)
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.api_url = f"https://api.telegram.org/bot{bot_token}"
        self.cache_dir = Path(cache_dir)
        self.sent_listings_file = self.cache_dir / "sent_listings.json"
        self.max_retries = max_retries
        self.retry_delay = retry_delay
        self.max_images = max_images
        self.download_images = download_images
        
        # –ñ—É—Ä–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π (—Ö—Ä–∞–Ω–∏—Ç URLs)
        self.sent_listings: Set[str] = set()
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—ç—à–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self._ensure_cache_dir()
        
        # –ó–∞–≥—Ä—É–∑–∏–º —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        self._load_sent_listings()
    
    def _ensure_cache_dir(self):
        """–£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫—ç—à–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
        self.cache_dir.mkdir(parents=True, exist_ok=True)
    
    def _load_sent_listings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞."""
        if self.sent_listings_file.exists():
            try:
                with open(self.sent_listings_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.sent_listings = set(data)
                self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.sent_listings)} —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ —Å—Ç–∞—Ä—ã–π –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
                self._save_sent_listings()
    
    def _save_sent_listings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Ñ–∞–π–ª."""
        try:
            with open(self.sent_listings_file, 'w', encoding='utf-8') as f:
                json.dump(list(self.sent_listings), f, ensure_ascii=False, indent=2)
            self.logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.sent_listings)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
    
    def _escape_markdown(self, text: str) -> str:
        """
        –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown V2.
        
        :param text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        :return: –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Markdown V2
        """
        if not text:
            return ""
            
        # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å: _ * [ ] ( ) ~ ` > # + - = | { } . !
        escape_chars = r'_*[]()~`>#+-=|{}.!'
        
        for char in escape_chars:
            text = text.replace(char, f'\\{char}')
        
        return text
    
    def format_message(self, listing: Listing) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
        
        :param listing: –û–±—ä–µ–∫—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Markdown V2
        """
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∑–∞–≥–æ–ª–æ–≤–æ–∫, —Ü–µ–Ω–∞, –ø–ª–æ—â–∞–¥—å)
        title = self._escape_markdown(listing.title or "–ó–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫")
        price = self._escape_markdown(listing.format_price() or "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        area = self._escape_markdown(listing.format_area() or "–ü–ª–æ—â–∞–¥—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        
        # –ü–µ—Ä–µ–≤–æ–¥ –≤ –≥–µ–∫—Ç–∞—Ä—ã, –µ—Å–ª–∏ –ø–ª–æ—â–∞–¥—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∞—è
        if listing.area and listing.area > 10000:  # –ë–æ–ª—å—à–µ 1 –≥–∞
            ha = listing.to_hectares()
            if ha:
                area += f" \\({ha:.2f} –≥–∞\\)"
        
        # –¶–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä
        price_per_sqm = ""
        if listing.price_per_sqm:
            price_per_sqm = f"\nüíµ *–¶–µ–Ω–∞ –∑–∞ –º¬≤*: {self._escape_markdown(f'{listing.price_per_sqm:.1f} {listing.price_currency}')}"
        elif listing.price and listing.area and listing.area > 0:
            price_per_sqm_value = listing.price / listing.area
            price_per_sqm = f"\nüíµ *–¶–µ–Ω–∞ –∑–∞ –º¬≤*: {self._escape_markdown(f'{price_per_sqm_value:.1f} {listing.price_currency}')}"
        
        # –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        location = self._escape_markdown(listing.location or "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        
        # –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        features = []
        
        if listing.has_water:
            features.append("üìã –í–æ–¥–∞")
        if listing.has_electricity:
            features.append("‚ö° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ")
        if listing.has_internet:
            features.append("üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç")
        if listing.zoning:
            features.append(f"üè¢ –ó–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {self._escape_markdown(listing.zoning)}")
        if listing.terrain_type:
            features.append(f"üèû –¢–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏: {self._escape_markdown(listing.terrain_type)}")
            
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if listing.attributes:
            for key, value in listing.attributes.items():
                if value and key not in ["price", "area", "location", "title"]:
                    features.append(f"‚Ä¢ {self._escape_markdown(str(key))}: {self._escape_markdown(str(value))}")
        
        features_text = "\n".join(features) if features else "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
        
        # –û–ø–∏—Å–∞–Ω–∏–µ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É)
        description = ""
        if listing.description:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è
            max_desc_length = 300
            desc = listing.description[:max_desc_length]
            if len(listing.description) > max_desc_length:
                desc += "..."
            description = f"\n\nüìù *–û–ø–∏—Å–∞–Ω–∏–µ*:\n{self._escape_markdown(desc)}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üèû *{title}*\n\n"
        message += f"üí∞ *–¶–µ–Ω–∞*: {price}\n"
        message += f"üìè *–ü–ª–æ—â–∞–¥—å*: {area}{price_per_sqm}\n"
        message += f"üìç *–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ*: {location}\n\n"
        message += f"*–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏*:\n{features_text}{description}\n\n"
        
        # –î–∞—Ç–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏ –∏—Å—Ç–æ—á–Ω–∏–∫
        source_name = {
            "mercadolibre": "MercadoLibre",
            "infocasas": "InfoCasas",
            "gallito": "Gallito"
        }.get(listing.source, listing.source)
        
        found_date = listing.crawled_at.strftime("%d.%m.%Y")
        
        message += f"üîç –ù–∞–π–¥–µ–Ω–æ {found_date} –Ω–∞ {self._escape_markdown(source_name)}\n"
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        url = str(listing.url)
        message += f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é]({url})"
        
        return message
    
    async def download_image(self, image_url: str, session: ClientSession) -> Optional[str]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É.
        
        :param image_url: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        :param session: –°–µ—Å—Å–∏—è aiohttp
        :return: –ü—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not image_url:
            return None
            
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            images_dir = self.cache_dir / "images"
            images_dir.mkdir(parents=True, exist_ok=True)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL –∏ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            filename = f"{int(time.time())}_{hash(image_url) % 10000}.jpg"
            file_path = images_dir / filename
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            async with session.get(image_url, timeout=ClientTimeout(total=30)) as response:
                if response.status != 200:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_url}, –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: {response.status}")
                    return None
                    
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
                image_data = await response.read()
                with open(file_path, 'wb') as f:
                    f.write(image_data)
                
                return str(file_path)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_url}: {e}")
            return None
    
    async def _send_request(self, method: str, params: Dict, session: ClientSession, files: Optional[Dict] = None) -> Dict:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Telegram API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö.
        
        :param method: –ú–µ—Ç–æ–¥ API
        :param params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        :param session: –°–µ—Å—Å–∏—è aiohttp
        :param files: –§–∞–π–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        :return: –û—Ç–≤–µ—Ç –æ—Ç API
        """
        url = f"{self.api_url}/{method}"
        attempts = 0
        
        while attempts < self.max_retries:
            try:
                if files:
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ multipart/form-data
                    data = aiohttp.FormData()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    for key, value in params.items():
                        data.add_field(key, str(value))
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
                    for file_key, file_path in files.items():
                        with open(file_path, 'rb') as f:
                            data.add_field(file_key, f, filename=os.path.basename(file_path))
                    
                    async with session.post(url, data=data) as response:
                        result = await response.json()
                else:
                    # –û–±—ã—á–Ω—ã–π POST –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    async with session.post(url, json=params) as response:
                        result = await response.json()
                
                if result.get('ok'):
                    return result
                else:
                    error_msg = result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    self.logger.warning(f"–û—à–∏–±–∫–∞ API Telegram: {error_msg}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞–ø—Ä–æ—Å
                    if 'retry_after' in result:
                        retry_after = int(result['retry_after'])
                        self.logger.info(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–∂–∏–¥–∞–µ–º {retry_after} —Å–µ–∫—É–Ω–¥")
                        await asyncio.sleep(retry_after)
                    elif 'Too Many Requests' in error_msg:
                        # –ï—Å–ª–∏ API –Ω–µ —É–∫–∞–∑–∞–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        await asyncio.sleep(self.retry_delay * (attempts + 1))
                    else:
                        # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —Ç–æ–∂–µ –¥–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
                        await asyncio.sleep(self.retry_delay)
            
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegram API: {e}")
                await asyncio.sleep(self.retry_delay)
            
            attempts += 1
        
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Telegram API –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫")
    
    async def send_message(self, text: str, session: ClientSession) -> Dict:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª Telegram.
        
        :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π Markdown V2
        :param session: –°–µ—Å—Å–∏—è aiohttp
        :return: –û—Ç–≤–µ—Ç –æ—Ç API
        """
        params = {
            'chat_id': self.chat_id,
            'text': text,
            'parse_mode': 'MarkdownV2',
            'disable_web_page_preview': False
        }
        
        return await self._send_request('sendMessage', params, session)
    
    async def send_photo(self, photo_path: str, caption: str, session: ClientSession) -> Dict:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ –∫–∞–Ω–∞–ª Telegram.
        
        :param photo_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        :param caption: –ü–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π Markdown V2
        :param session: –°–µ—Å—Å–∏—è aiohttp
        :return: –û—Ç–≤–µ—Ç –æ—Ç API
        """
        params = {
            'chat_id': self.chat_id,
            'caption': caption,
            'parse_mode': 'MarkdownV2'
        }
        
        files = {'photo': photo_path}
        
        return await self._send_request('sendPhoto', params, session, files)
    
    async def send_media_group(self, media_paths: List[str], caption: str, session: ClientSession) -> Dict:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ –∫–∞–Ω–∞–ª Telegram.
        
        :param media_paths: –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        :param caption: –ü–æ–¥–ø–∏—Å—å –∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π Markdown V2
        :param session: –°–µ—Å—Å–∏—è aiohttp
        :return: –û—Ç–≤–µ—Ç –æ—Ç API
        """
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ
        media_paths = media_paths[:self.max_images]
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
        media = []
        for i, path in enumerate(media_paths):
            media_item = {
                'type': 'photo',
                'media': f'attach://{i}'
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É –º–µ–¥–∏–∞—Ñ–∞–π–ª—É
            if i == 0 and caption:
                media_item['caption'] = caption
                media_item['parse_mode'] = 'MarkdownV2'
            
            media.append(media_item)
        
        params = {
            'chat_id': self.chat_id,
            'media': json.dumps(media)
        }
        
        files = {str(i): path for i, path in enumerate(media_paths)}
        
        return await self._send_request('sendMediaGroup', params, session, files)
    
    async def send_listing(self, listing: Listing) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª Telegram.
        
        :param listing: –û–±—ä–µ–∫—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        :return: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        listing_url = str(listing.url)
        if listing_url in self.sent_listings:
            self.logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {listing_url} —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ")
            return False
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = self.format_message(listing)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        has_images = listing.images and len(listing.images) > 0
        
        async with aiohttp.ClientSession() as session:
            try:
                if has_images and self.download_images:
                    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    image_paths = []
                    for image_url in listing.images[:self.max_images]:
                        image_path = await self.download_image(image_url, session)
                        if image_path:
                            image_paths.append(image_path)
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫–∞—á–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
                    if image_paths:
                        if len(image_paths) == 1:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
                            await self.send_photo(image_paths[0], message, session)
                        else:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–¥–ø–∏—Å—å—é
                            await self.send_media_group(image_paths, message, session)
                        
                        # –£–¥–∞–ª—è–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        for path in image_paths:
                            try:
                                os.remove(path)
                            except:
                                pass
                    else:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await self.send_message(message, session)
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    await self.send_message(message, session)
                
                # –î–æ–±–∞–≤–ª—è–µ–º URL –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                self.sent_listings.add(listing_url)
                self._save_sent_listings()
                
                self.logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {listing_url} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                return True
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {listing_url} –≤ Telegram: {e}")
                return False
    
    async def send_listings(self, listings: List[Listing], delay: float = 1.0) -> int:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª Telegram —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
        
        :param listings: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        :param delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        """
        sent_count = 0
        
        for listing in listings:
            success = await self.send_listing(listing)
            if success:
                sent_count += 1
            
            # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API Telegram
            if listing != listings[-1]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                await asyncio.sleep(delay)
        
        return sent_count

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
async def test_telegram_sender():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ Telegram."""
    from dotenv import load_dotenv
    load_dotenv()
    
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    chat_id = os.getenv("TELEGRAM_CHAT_ID")
    
    if not bot_token or not chat_id:
        logging.error("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    test_listing = Listing(
        id="test123",
        url="https://example.com/listing/123",
        source="test",
        title="–¢–µ—Å—Ç–æ–≤—ã–π –∑–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ —É –æ–∑–µ—Ä–∞",
        price=75000,
        price_currency="USD",
        area=5000,
        area_unit="m¬≤",
        location="Canelones, Uruguay",
        description="–ü—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –∑–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫ —Å –≤–∏–¥–æ–º –Ω–∞ –æ–∑–µ—Ä–æ. –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∑–∞–≥–æ—Ä–æ–¥–Ω–æ–≥–æ –¥–æ–º–∞.",
        images=["https://picsum.photos/800/600", "https://picsum.photos/800/601"],
        has_water=True,
        has_electricity=True,
        terrain_type="–•–æ–ª–º–∏—Å—Ç—ã–π"
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    sender = TelegramSender(bot_token, chat_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    result = await sender.send_listing(test_listing)
    
    if result:
        logging.info("–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    else:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    asyncio.run(test_telegram_sender()) 